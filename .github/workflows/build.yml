name: Build X-Rechnung Tool

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Tesseract OCR and Ghostscript
        run: |
          choco install tesseract --version=5.3.3.20231005 -y
          choco install ghostscript -y

          # Überprüfe Tesseract-Installation
          echo "Tesseract Installation prüfen:"
          if (Test-Path "C:\Program Files\Tesseract-OCR\tesseract.exe") {
            echo "Tesseract gefunden unter: C:\Program Files\Tesseract-OCR\tesseract.exe"
          } else {
            echo "Tesseract nicht gefunden unter erwartetem Pfad!"
            Get-ChildItem "C:\Program Files" -Recurse -Filter "tesseract.exe" -ErrorAction SilentlyContinue | ForEach-Object { echo "Gefunden unter: $($_.FullName)" }
          }

          # Überprüfe Ghostscript-Installation und finde den tatsächlichen Pfad
          echo "Ghostscript Installation prüfen:"
          $gsPath = $null
          Get-ChildItem "C:\Program Files\gs" -Recurse -Filter "gswin64c.exe" -ErrorAction SilentlyContinue | ForEach-Object { 
            echo "Ghostscript gefunden unter: $($_.FullName)"
            $gsPath = $_.FullName
          }

          if ($gsPath) {
            echo "::set-output name=gs_path::$gsPath"
            echo "GS_PATH=$gsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "Ghostscript nicht gefunden! Suche in anderen Verzeichnissen..."
            Get-ChildItem "C:\Program Files" -Recurse -Filter "gswin64c.exe" -ErrorAction SilentlyContinue | ForEach-Object { 
              echo "Ghostscript gefunden unter: $($_.FullName)"
              $gsPath = $_.FullName
            }
            if ($gsPath) {
              echo "::set-output name=gs_path::$gsPath"
              echo "GS_PATH=$gsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            } else {
              echo "Ghostscript nicht gefunden!"
            }
          }

          # Füge Tesseract zum PATH hinzu
          echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Füge Ghostscript-Verzeichnis zum PATH hinzu, wenn gefunden
          if ($gsPath) {
            $gsDir = Split-Path -Parent $gsPath
            echo "$gsDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
        shell: pwsh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Verify imports
        run: |
          python -c "import sys; print('Python Version:', sys.version)"
          python -c "import pikepdf; print('pikepdf successfully imported')"
          python -c "import win32com; print('pywin32 successfully imported')"
          python -c "import chardet; print('chardet successfully imported')"
          python -c "import ocrmypdf; print('ocrmypdf successfully imported')"

      - name: Create Self-Signed Certificate
        run: |
          $cert = New-SelfSignedCertificate -DnsName "x-rechnung-tool.local" -Type CodeSigning -CertStoreLocation Cert:\CurrentUser\My
          $certPath = "Cert:\CurrentUser\My\$($cert.Thumbprint)"
          $pfxPath = ".\certificate.pfx"
          $password = ConvertTo-SecureString -String "temp123!" -Force -AsPlainText
          Export-PfxCertificate -Cert $certPath -FilePath $pfxPath -Password $password
        shell: pwsh

      - name: Build CLI Application
        shell: pwsh
        run: |
          # Tesseract-Pfad
          $tesseractPath = "C:\Program Files\Tesseract-OCR\tesseract.exe"

          # Ghostscript-Pfad aus der Umgebungsvariable oder Fallback
          $gsPath = $env:GS_PATH
          if (-not $gsPath) {
            Write-Host "GS_PATH nicht gefunden, suche nach Ghostscript..."
            $gsPath = (Get-ChildItem "C:\Program Files" -Recurse -Filter "gswin64c.exe" -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          }

          Write-Host "Verwende Tesseract: $tesseractPath"
          Write-Host "Verwende Ghostscript: $gsPath"

          # Prüfe, ob die Dateien existieren
          $tesseractExists = Test-Path $tesseractPath
          $gsExists = $gsPath -and (Test-Path $gsPath)

          Write-Host "Tesseract existiert: $tesseractExists"
          Write-Host "Ghostscript existiert: $gsExists"

          # Erstelle PyInstaller-Befehl
          $pyinstallerCmd = "pyinstaller --clean --noconfirm --log-level=DEBUG --name x-rechnung-tool --onefile"

          if ($tesseractExists) {
            $pyinstallerCmd += " --add-binary `"$tesseractPath;.`""
          }

          if ($gsExists) {
            $pyinstallerCmd += " --add-binary `"$gsPath;.`""
          }

          $pyinstallerCmd += " x_rechnung_tool.py"

          Write-Host "Ausführen: $pyinstallerCmd"
          Invoke-Expression $pyinstallerCmd

      - name: Sign EXE
        run: |
          $password = ConvertTo-SecureString -String "temp123!" -Force -AsPlainText
          Import-PfxCertificate -FilePath .\certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $password
          $cert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Where-Object {$_.Subject -match "x-rechnung-tool.local"}
          Set-AuthenticodeSignature -FilePath ".\dist\x-rechnung-tool.exe" -Certificate $cert -TimestampServer "http://timestamp.digicert.com"
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: x-rechnung-tool-windows
          path: dist/x-rechnung-tool.exe
          retention-days: 5 # Artifacts werden nach 5 Tagen automatisch gelöscht

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/x-rechnung-tool.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
